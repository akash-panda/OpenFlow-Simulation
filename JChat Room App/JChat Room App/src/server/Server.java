package server;

// * To change this license header, choose License Headers in Project Properties.



import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;

import server.MultiClientManager;
import server.Server;
/**
 *
 * @author Nilay
 */
public class Server extends javax.swing.JFrame {
	
	private static final long serialVersionUID = 1L;
	int portNumber;
	static int clientID;
	static Vector<String> clients;
	static Vector<PrintWriter> outstreams;
	static Vector<BufferedReader> instreams;
	static List<Integer> clientscount = new ArrayList<Integer>();
	static int count = 0;
	public static List<List<String>> recordforclients = new ArrayList<List<String>>();
	public static List<String> x = null;
	public static List<List<String>> flowtable = new ArrayList<List<String>>();
	public static List<String> x1 = null;
	static PrintWriter out;
    static BufferedReader reader;

    /**
     * Creates new form SwitchGUI
     * @throws IOException 
     */
    public Server() throws IOException {
        initComponents();
        setimage();
        
        reader = new BufferedReader(new FileReader("M:\\Flowtable.txt"));
		
		String tableentry = null;
		jTextArea2.append("  Source                         " + "Destination\n");
		jTextArea2.append(" -----------" + "-----------------------------------------");
		while((tableentry = reader.readLine())!=null)
		{
			
			
			
			String[] xc = tableentry.split("     --->     ");
			x1 = new ArrayList<String>();
			x1.add(xc[0]);
			x1.add(xc[1]);
			jTextArea2.append("\n" + xc[0] + "     --->     " + xc[1]);
			flowtable.add(x1);
		}
		
		clientID = 0;
		clients = new Vector<>();
		clients.add("Server");
		outstreams = new Vector<>();
		instreams = new Vector<>();
    }
    
 // method to get the Port Number to make the connection
  	public int getPortNumber() {
  		
  		String port = null;
  		
  		do {
  			JOptionPane.showMessageDialog(null, "Enter integer value >= 5000");
  			port = JOptionPane.showInputDialog("Enter port number :");
  		}while (!isValidPort(port));
  		portNumber = Integer.parseInt(port);
  		return portNumber;
  	}
  	
  	public static boolean isValidPort(String input) {
		int port;
		try {
			port = Integer.parseInt(input);
		}
		catch (NumberFormatException e) {
			return false;
		}
		return (port >= 5000) ? true : false;
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(500, 500, 0, 0));
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Simulation Log");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 0, 180, 30);

        jLabel3.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Flow Table");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 270, 130, 30);

        jLabel1.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Controller");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(460, 270, 120, 30);

        jTextArea1.setBackground(new java.awt.Color(111, 159, 209));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Roboto Condensed", 0, 18)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 40, 740, 220);

        jTextArea2.setBackground(new java.awt.Color(111, 159, 209));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Roboto Condensed", 0, 18)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(40, 310, 330, 180);

        jTextArea3.setBackground(new java.awt.Color(111, 159, 209));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Roboto Condensed", 0, 18)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(460, 310, 320, 180);

        jLabel5.setIcon(new javax.swing.ImageIcon("M:\\rsz_14_-_31.png")); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(-6, 0, 830, 520);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       /* try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwitchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwitchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwitchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwitchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
    	
    	try { 
    	    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    	} catch (Exception e) {
    	    e.printStackTrace();
    	}

        /* Create and display the form */
    	Server serv = null;
		try {
			serv = new Server();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        serv.setSize(830, 560);
        serv.setVisible(true);
		int port = serv.getPortNumber();
		
		
		
		
		
		ServerSocket sSocket = null;
		try {
			sSocket = new ServerSocket(port);
			InetAddress ip;
			Enumeration<NetworkInterface> n = NetworkInterface.getNetworkInterfaces();
		    for (; n.hasMoreElements();)
		    {
		        NetworkInterface e = n.nextElement();

		        Enumeration<InetAddress> a = e.getInetAddresses();
		        for (; a.hasMoreElements();)
		        {
		            InetAddress addr = a.nextElement();
		            System.out.println("  " + addr.getHostAddress());
		        }
		    }
			String ip1 = InetAddress.getLocalHost().getHostAddress();
			System.out.println(ip1);
		} catch (IOException e) {
			System.out.println("Some problem with setting Connection to port Number : "+port);
			e.printStackTrace();
		}
		
		Socket sock;
		MultiClientManager handler;
		while (true) {
			try {
				sock = sSocket.accept();
				System.out.println("Accepted Client "+clientID);
				
				
				handler = new MultiClientManager(clientID, sock,serv);
				clientID = clientID + 1;
				//handler.start();
				new Thread(handler).start();
			
			} catch (IOException e) {
				System.out.println("IOE in Server");
				e.printStackTrace();
			}
		}
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    public static javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

    private void setimage() {
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("images.png")));
    }
}
